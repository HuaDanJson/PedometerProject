package com.aidebar.greendaotest.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.lenovo.test_sql.DB.DBStepEveryDayCountBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBSTEP_EVERY_DAY_COUNT_BEAN".
*/
public class DBStepEveryDayCountBeanDao extends AbstractDao<DBStepEveryDayCountBean, Long> {

    public static final String TABLENAME = "DBSTEP_EVERY_DAY_COUNT_BEAN";

    /**
     * Properties of entity DBStepEveryDayCountBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DateAsId = new Property(0, long.class, "dateAsId", true, "_id");
        public final static Property StepCount = new Property(1, String.class, "stepCount", false, "DBStepEveryDayCountBean");
        public final static Property XiaoHaokaLiLuCount = new Property(2, String.class, "XiaoHaokaLiLuCount", false, "XIAO_HAOKA_LI_LU_COUNT");
    }


    public DBStepEveryDayCountBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DBStepEveryDayCountBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBSTEP_EVERY_DAY_COUNT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: dateAsId
                "\"DBStepEveryDayCountBean\" TEXT," + // 1: stepCount
                "\"XIAO_HAOKA_LI_LU_COUNT\" TEXT);"); // 2: XiaoHaokaLiLuCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBSTEP_EVERY_DAY_COUNT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBStepEveryDayCountBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getDateAsId());
 
        String stepCount = entity.getStepCount();
        if (stepCount != null) {
            stmt.bindString(2, stepCount);
        }
 
        String XiaoHaokaLiLuCount = entity.getXiaoHaokaLiLuCount();
        if (XiaoHaokaLiLuCount != null) {
            stmt.bindString(3, XiaoHaokaLiLuCount);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBStepEveryDayCountBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getDateAsId());
 
        String stepCount = entity.getStepCount();
        if (stepCount != null) {
            stmt.bindString(2, stepCount);
        }
 
        String XiaoHaokaLiLuCount = entity.getXiaoHaokaLiLuCount();
        if (XiaoHaokaLiLuCount != null) {
            stmt.bindString(3, XiaoHaokaLiLuCount);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public DBStepEveryDayCountBean readEntity(Cursor cursor, int offset) {
        DBStepEveryDayCountBean entity = new DBStepEveryDayCountBean( //
            cursor.getLong(offset + 0), // dateAsId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // stepCount
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // XiaoHaokaLiLuCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBStepEveryDayCountBean entity, int offset) {
        entity.setDateAsId(cursor.getLong(offset + 0));
        entity.setStepCount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setXiaoHaokaLiLuCount(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBStepEveryDayCountBean entity, long rowId) {
        entity.setDateAsId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBStepEveryDayCountBean entity) {
        if(entity != null) {
            return entity.getDateAsId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBStepEveryDayCountBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
